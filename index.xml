<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mike Hadlow</title><link>https://mikehadlow.com/</link><description>Recent content on Mike Hadlow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mikehadlow.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Add event handlers dynamically using reflection</title><link>https://mikehadlow.com/posts/event-handlers-by-reflection/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/event-handlers-by-reflection/</guid><description>&lt;p>Recently I had a situation where I needed to test a class with dozens of event handlers. Rather than manually write the repetitive code to attach the handlers I decided to cheat and use reflection. Since there wasn&amp;rsquo;t anything immediately available online that I could find, I&amp;rsquo;m sharing an example here to show how to do it.&lt;/p></description></item><item><title>Book Review: Code That Fits In Your Head by Mark Seeman</title><link>https://mikehadlow.com/posts/code-that-fits-in-your-head/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/code-that-fits-in-your-head/</guid><description>&lt;p>This is my review of &lt;a href="https://blog.ploeh.dk/">Mark Seemann&amp;rsquo;s&lt;/a> new book, &lt;a href="https://www.amazon.co.uk/Code-That-Fits-Your-Head/dp/0137464401">Code That Fits In Your Head - Heuristics for Software Engineering&lt;/a> .&lt;/p></description></item><item><title>How to use Google.Protobuf without code generation in C#</title><link>https://mikehadlow.com/posts/use-google-protobuf-without-code-generation/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/use-google-protobuf-without-code-generation/</guid><description>&lt;p>The &lt;a href="https://www.nuget.org/packages/Google.Protobuf/">&lt;code>Google.Protobuf&lt;/code>&lt;/a> NuGet package is the recommended &lt;a href="https://developers.google.com/protocol-buffers">protobuf&lt;/a> serializer for .NET. The documented way of using it is to code gen both C# models and serializers from &lt;code>.proto&lt;/code> files using the &lt;code>protoc&lt;/code> tool. However, sometimes it&amp;rsquo;s more convenient to do serialization/deserialization on an ad-hoc basis without code generation. The &lt;code>Google.Protobuf&lt;/code> NuGet package provides APIs to do this, but they are poorly documented. This post gives a code example for a simple &amp;ldquo;no-code-gen&amp;rdquo; serializer.&lt;/p></description></item><item><title>Blocking XREAD From A Redis Stream Using StackExchange.Redis</title><link>https://mikehadlow.com/posts/xread-from-a-redis-stream-using-stackexchange-redis/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/xread-from-a-redis-stream-using-stackexchange-redis/</guid><description>&lt;p>The &lt;a href="https://github.com/StackExchange/StackExchange.Redis">StackExchange.Redis&lt;/a> NuGet package is the most popular .NET client for &lt;a href="https://redis.io/">Redis&lt;/a>. It&amp;rsquo;s stable, high-performance, with a great community and wide usage. One of it&amp;rsquo;s most interesting features is the way it does network &lt;a href="https://stackexchange.github.io/StackExchange.Redis/PipelinesMultiplexers.html#multiplexing">multiplexing&lt;/a>. This allows multi-threaded applications to use a single TCP/IP connection without blocking. Unfortunately this also means that the library does not support blocking operations such as &lt;code>XREAD BLOCK&lt;/code>, which is important if you want to leverage &lt;a href="https://redis.io/topics/streams-intro">Redis Streams&lt;/a> on .NET. This post offers a work-around for this.&lt;/p></description></item><item><title>Large Numbers of Bindings With RabbitMQ</title><link>https://mikehadlow.com/posts/large-numbers-of-bindings-with-rabbitmq/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/large-numbers-of-bindings-with-rabbitmq/</guid><description>&lt;p>RabbitMQ (or more specifically the AMQP protocol) provides a degree of flexibility over other message-queue solutions with its exchange-binding-queue model. Some possible solutions to scaling or business issues result in large numbers of bindings being created, perhaps thousands per queue. We tested RabbitMQ to find out what the binding performance limits were and present the results in this post. It seems that large numbers of bindings are not in themselves a performance issue, but on a RabbitMQ cluster, &amp;ldquo;binding churn&amp;rdquo; the rate at which they are created and destroyed can have a large impact on message delivery and because bindings can take time to propagate through the cluster there is the possibility of message loss.&lt;/p></description></item><item><title>Register a Microsoft.Extensions.Logging.ILoggerProvider with EasyNetQ</title><link>https://mikehadlow.com/posts/easynetq-iloggerprovider/</link><pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/easynetq-iloggerprovider/</guid><description>&lt;p>&lt;a href="https://easynetq.com/">EasyNetQ&lt;/a> is an opinionated fully featured client API for &lt;a href="https://www.rabbitmq.com/">RabbitMQ&lt;/a>. It provides extensive diagnostic logging capabilities via &lt;a href="https://github.com/damianh/LibLog">LibLog&lt;/a> a logging abstraction that provides support for many common logging libraries. Unfortuntely LigLog doesn&amp;rsquo;t support &lt;code>Microsoft.Extensions.Logging&lt;/code>, but this post provides an adaptor, &lt;code>EasyNetQMicrosoftExtensionsLogProvider&lt;/code> that will allow EasyNetQ to log to a &lt;code>Microsoft.Extensions.Logging.ILoggerProvider&lt;/code>.&lt;/p></description></item><item><title>How to create a standalone ConsoleLoggerProvider</title><link>https://mikehadlow.com/posts/standalone-consoleloggerprovider/</link><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/standalone-consoleloggerprovider/</guid><description>&lt;p>If, for whatever reason you want to create a stand alone instance of &lt;code>ConsoleLoggerProvider&lt;/code> without having to leverage dependency injection and the full Hosting framework, you&amp;rsquo;ll find that the &lt;code>ConsoleLoggerProvider&lt;/code>&amp;rsquo;s constructor requires an instance of an &lt;code>IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code>, the only instance of which &lt;code>OptionsMonitor&amp;lt;T&amp;gt;&lt;/code> in turn has a complex constructor with many dependencies. This all seems like a failure of design on Microsoft&amp;rsquo;s part. Here I give a simple no-op &lt;code>IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code> implementation to allow one to easily create a &lt;code>ConsoleLoggerProvider&lt;/code>.&lt;/p></description></item><item><title>Microsoft.Extensions.DependencyInjection object graph writer</title><link>https://mikehadlow.com/posts/service-collection-object-graph-writer/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/service-collection-object-graph-writer/</guid><description>&lt;p>It&amp;rsquo;s very useful sometimes to be able to quickly view the object graph created by a dependency injection (or IoC) container, especially when you&amp;rsquo;re a new starter on an existing project. I was recently attempting to get up to speed on a .NET Core project, but I couldn&amp;rsquo;t find anything that would output an object graph from the &lt;code>Microsoft.Extensions.DependencyInjection&lt;/code> &lt;code>IServiceCollection&lt;/code>, so I wrote a simple class that reads the graph and outputs a basic representation. I&amp;rsquo;m sharing it here for my own benefit, but also as a starting point if anyone else needs something similar.&lt;/p></description></item><item><title>A Simple Console Periodic Loop in C#</title><link>https://mikehadlow.com/posts/simple-console-loop/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/simple-console-loop/</guid><description>&lt;p>I found myself writing the same code several times for a simple console periodic loop, so I&amp;rsquo;m posting the framework here mainly for my own benefit. This uses C# 7&amp;rsquo;s new async Main entry point and avoids the need to spawn a new thread for the loop. Worth noting though that each iteration after the &lt;code>Task.Delay&lt;/code> will run on a threadpool thread.&lt;/p></description></item><item><title>About</title><link>https://mikehadlow.com/top/about/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/top/about/</guid><description>Hello! I am Mike Hadlow. I am a software developer, based in the UK. I&amp;rsquo;ve been building software professionally for over 20 years using Microsoft development tools and technologies and since 2002 primarily with .NET. Since 1998 I have worked as an independent contractor with my own consulting company, Suteki Ltd. During that time I&amp;rsquo;ve worked on a large range of projects in many different industries, ranging from finance and insurance to the music business.</description></item><item><title>Contact</title><link>https://mikehadlow.com/top/contact/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/top/contact/</guid><description> Service Address Email mike@suteki.co.uk Twitter @mikehadlow GitHub @mikehadlow</description></item><item><title>Welcome To My New Blog</title><link>https://mikehadlow.com/posts/welcome-to-my-new-blog/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://mikehadlow.com/posts/welcome-to-my-new-blog/</guid><description>&lt;p>I&amp;rsquo;ve been blogging since 2005 and have written hundreds of posts in that time, but my blogging output has declined somewhat over the last few years. That&amp;rsquo;s partly laziness on my part, and partly because Twitter provides a much more convenient platform for the quick take, but it&amp;rsquo;s also because there&amp;rsquo;s too much friction in publishing a post on my long running &lt;a href="https://www.blogger.com/about/">Google Blogger&lt;/a> site &lt;a href="https://mikehadlow.blogspot.com/">Code Rant&lt;/a>. Google has done little to update the ancient Blogspot platform over the years and it&amp;rsquo;s showing its age. The effort required to upload and format a blog post is too high, and has effectively disincentivised me from blogging. In the last few years I&amp;rsquo;ve sometimes managed just a single post per year. So, long overdue, I&amp;rsquo;ve decided to start a new blog here at &lt;strong>mikehadlow.com&lt;/strong> using modern developer platform technologies. This is the first post.&lt;/p></description></item></channel></rss>